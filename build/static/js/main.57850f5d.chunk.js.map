{"version":3,"sources":["components/Thread.js","components/NewThreadFrom.js","services/threads.js","App.js","index.js"],"names":["Thread","props","_useState","useState","_useState2","Object","slicedToArray","editedMessage","setEditedMessage","react_default","a","createElement","onClick","deleteThread","id","title","message","value","onChange","event","target","editThread","newThreadForm","onSubmit","addNewThread","newTitle","setNewTitle","newMessage","setNewMessage","type","baseUrl","services_threads","console","log","axios","get","then","response","data","newObject","post","put","concat","delete","App","threads","setThreads","_useState3","_useState4","_useState5","_useState6","useEffect","threadService","initialThreads","catch","error","filter","thread","newThreadObject","find","t","changedThread","objectSpread","returnedThread","map","components_Thread","key","NewThreadFrom","preventDefault","threadObject","date","Date","toISOString","Math","floor","random","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.57850f5d.chunk.js","sourcesContent":["import React, {useState} from 'react'\n  \nconst Thread = (props) => {\n\n  const [editedMessage, setEditedMessage] = useState(\"\")\n  const handleEditedChange = (event) => {\n    setEditedMessage(event.target.value)\n  }\n\n  return (\n    <div>\n      <h4>Thread:</h4>\n      <button onClick={() => props.deleteThread(props.id)}> delete </button>\n      <p>Title: {props.title}</p>\n      <p>Message: {props.message}</p>\n\n      <form >\n        <div>\n          new message\n          <input value={editedMessage}\n            onChange={handleEditedChange}/>\n        </div>\n        <button onClick={() => props.editThread(props.id, editedMessage)}> edit </button>\n      </form>\n    </div>\n  )\n}\n\nexport default Thread","import React from 'react'\n\nconst newThreadForm = (props) => {\n\n  const handleTitleChange = (event) => {\n    props.setNewTitle(event.target.value)\n  }\n\n  const handleMessageChange = (event) => {\n    props.setNewMessage(event.target.value)\n  }\n\n  return (\n    <div>\n      <h3>Add new thread</h3>\n      <form onSubmit={props.addNewThread}>\n        <div>\n          title:\n              <input value={props.newTitle}\n            onChange={handleTitleChange} />\n        </div>\n        <div>\n          message:\n              <input value={props.newMessage}\n            onChange={handleMessageChange} />\n        </div>\n        <button type=\"submit\">add</button>\n      </form>\n    </div>\n  )\n}\n\nexport default newThreadForm\n\n","import axios from 'axios'\n\nconst baseUrl = '/api/threads'\n\nconst getAll = () => {\n    console.log(\"yriteään saada yhteys\")\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n    \n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\n\nconst update = (newObject) => {\n    const request = axios.put(`${baseUrl}/${newObject.id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst removeThread = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    removeThread,\n}","import React, { useState, useEffect } from 'react'\nimport Thread from './components/Thread'\nimport NewThreadForm from './components/NewThreadFrom'\nimport threadService from './services/threads'\n\n\nconst App = () => {\n  const [threads, setThreads] = useState([])\n  const [newTitle, setNewTitle] = useState(\"\")\n  const [newMessage, setNewMessage] = useState(\"\")\n\n\n  useEffect(() => {\n    threadService\n      .getAll().then(initialThreads => {\n        setThreads(initialThreads)\n        console.log('hiphei')\n        console.log(threads)\n      }).catch(error => {\n        console.log('error', error)\n      })\n  }, [])\n\n  const deleteThread = (id) => {\n    threadService\n      .removeThread(id).then(() => {\n        setThreads(threads.filter(thread => thread.id !== id))\n      })\n  }\n\n  const rows = () => {\n\n    return (\n    threads.map(t =>\n    <Thread\n      key={t.id}\n      id={t.id}\n      title={t.title}\n      message={t.message}\n      deleteThread={deleteThread}\n      editThread={editThread}\n    />\n    )\n  )}\n\n  const addNewThread = (event) => {\n    event.preventDefault()\n    const threadObject = {\n      title: newTitle,\n      message: newMessage,\n      date: new Date().toISOString(),\n      id: Math.floor((Math.random() * 10000))\n    }\n    setNewTitle('')\n    setNewMessage('')\n    threadService\n      .create(threadObject)\n      .then(returnedThread => {\n        setThreads(threads.concat(returnedThread))\n      })\n  }\n\n  const editThread = (id, editedMessage) => {\n\n    const newThreadObject = threads.find(t => t.id === id)\n    const changedThread = {...newThreadObject, message: editedMessage}\n\n    threadService\n      .update(changedThread)\n      .then(returnedThread => {\n        setThreads(threads.map(t => t.id !== changedThread.id ? t: returnedThread))\n      })\n  }\n\n\n  return (\n    <div>\n      <h2>Campus24</h2>\n      <h3>Threads</h3>\n      <ul>\n        {rows()}\n      </ul>\n      <NewThreadForm addNewThread={addNewThread} setNewTitle={setNewTitle}\n        setNewMessage={setNewMessage} newTitle={newTitle} newMessage={newMessage} />\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}